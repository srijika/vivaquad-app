{"ast":null,"code":"import { approvebussiness, resetpassword, resendOTPTOUser, varifyUser } from '../services/api';\nimport { message } from 'antd';\nexport default {\n  namespace: 'setting',\n  state: {\n    getBuss: {\n      count: 0\n    },\n    update: {\n      count: 0\n    },\n    create: {\n      count: 0\n    },\n    resetp: {\n      count: 0\n    },\n    approve: {\n      count: 0\n    },\n    otp: {\n      count: 0\n    },\n    verifyotp: {\n      count: 0\n    },\n    getSingleBussines: {}\n  },\n  subscriptions: {\n    setup(_ref) {\n      let {\n        dispatch,\n        history\n      } = _ref;\n    }\n\n  },\n  effects: {\n    *approveBuss(_ref2, _ref3) {\n      let {\n        payload\n      } = _ref2;\n      let {\n        call,\n        put\n      } = _ref3;\n      const response = yield call(approvebussiness, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        if (payload.isBussinessVerified) {\n          message.success('Business successfully approved!', 5);\n        } else {\n          message.success('Business successfully rejected!', 5);\n        }\n      }\n\n      yield put({\n        type: 'approve',\n        ...response\n      });\n    },\n\n    *changePassword(_ref4, _ref5) {\n      let {\n        payload\n      } = _ref4;\n      let {\n        call,\n        put\n      } = _ref5;\n      let user = JSON.parse(localStorage.getItem('user'));\n      const email = user.username;\n      let val = {\n        username: email,\n        password: payload.password,\n        old_password: payload.oldPassword,\n        otpchk: true\n      };\n      const response = yield call(resetpassword, val);\n      console.log(payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        message.success(response.msg || response.message, 5);\n      }\n\n      yield put({\n        type: 'resetp',\n        ...response\n      });\n    },\n\n    *resendOTPTOUser(_ref6, _ref7) {\n      let {\n        payload\n      } = _ref6;\n      let {\n        call,\n        put\n      } = _ref7;\n      const response = yield call(resendOTPTOUser, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      } // if(response.status) {message.success(response.msg || response.message, 5);} \n\n\n      yield put({\n        type: 'otp',\n        ...response\n      });\n    },\n\n    *varifyUser(_ref8, _ref9) {\n      let {\n        payload\n      } = _ref8;\n      let {\n        call,\n        put\n      } = _ref9;\n      const response = yield call(varifyUser, payload);\n\n      if (!response.status) {\n        message.error(response.msg || response.message || response.err, 5);\n      }\n\n      if (response.status) {\n        message.success(response.msg || response.message, 5);\n      }\n\n      yield put({\n        type: 'verifyotp',\n        ...response\n      });\n    },\n\n    *clearVerifyOTP(_ref10, _ref11) {\n      let {\n        payload\n      } = _ref10;\n      let {\n        call,\n        put\n      } = _ref11;\n      yield put({\n        type: 'clearVerifyOTP'\n      });\n    },\n\n    *clearAction(_ref12, _ref13) {\n      let {\n        payload\n      } = _ref12;\n      let {\n        call,\n        put\n      } = _ref13;\n      yield put({\n        type: 'clear'\n      });\n    }\n\n  },\n  reducers: {\n    getBuss(state, action) {\n      return { ...state,\n        getBuss: action\n      };\n    },\n\n    getSellerBussines(state, action) {\n      return { ...state,\n        getBuss: action\n      };\n    },\n\n    getSingleBussines(state, action) {\n      return { ...state,\n        getSingleBussines: action\n      };\n    },\n\n    busslist(state, action) {\n      return { ...state,\n        busslist: action\n      };\n    },\n\n    busssellerlist(state, action) {\n      return { ...state,\n        busssellerlist: action\n      };\n    },\n\n    create(state, action) {\n      action.count = state.create.count + 1;\n      return { ...state,\n        create: action\n      };\n    },\n\n    update(state, action) {\n      action.count = state.update.count + 1;\n      return { ...state,\n        update: action\n      };\n    },\n\n    approve(state, action) {\n      action.count = state.approve.count + 1;\n      return { ...state,\n        approve: action\n      };\n    },\n\n    approveReset(state, action) {\n      return { ...state,\n        approve: {\n          count: 0\n        }\n      };\n    },\n\n    resetp(state, action) {\n      action.count = state.resetp.count + 1;\n      return { ...state,\n        resetp: action\n      };\n    },\n\n    otp(state, action) {\n      return { ...state,\n        otp: action\n      };\n    },\n\n    verifyotp(state, action) {\n      return { ...state,\n        verifyotp: action\n      };\n    },\n\n    clearVerifyOTP(state, action) {\n      return { ...state,\n        verifyotp: {\n          count: 0\n        }\n      };\n    },\n\n    clear(state, action) {\n      return { ...state,\n        create: {\n          count: 0\n        },\n        approve: {\n          count: 0\n        },\n        update: {\n          count: 0\n        },\n        resetp: {\n          count: 0\n        },\n        otp: {\n          count: 0\n        },\n        verifyotp: {\n          count: 0\n        }\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["/var/www/html/project/vivaquad/admin-vivaquad/src/models/setting.js"],"names":["approvebussiness","resetpassword","resendOTPTOUser","varifyUser","message","namespace","state","getBuss","count","update","create","resetp","approve","otp","verifyotp","getSingleBussines","subscriptions","setup","dispatch","history","effects","approveBuss","payload","call","put","response","status","error","msg","err","isBussinessVerified","success","type","changePassword","user","JSON","parse","localStorage","getItem","email","username","val","password","old_password","oldPassword","otpchk","console","log","clearVerifyOTP","clearAction","reducers","action","getSellerBussines","busslist","busssellerlist","approveReset","clear"],"mappings":"AAAA,SAAQA,gBAAR,EAA2BC,aAA3B,EAA0CC,eAA1C,EAA2DC,UAA3D,QACW,iBADX;AAEA,SAAQC,OAAR,QAAsB,MAAtB;AAIA,eAAe;AACbC,EAAAA,SAAS,EAAE,SADE;AAGbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAC;AAACC,MAAAA,KAAK,EAAC;AAAP,KADH;AAELC,IAAAA,MAAM,EAAC;AAACD,MAAAA,KAAK,EAAC;AAAP,KAFF;AAGLE,IAAAA,MAAM,EAAC;AAACF,MAAAA,KAAK,EAAC;AAAP,KAHF;AAILG,IAAAA,MAAM,EAAC;AAACH,MAAAA,KAAK,EAAC;AAAP,KAJF;AAKLI,IAAAA,OAAO,EAAC;AAACJ,MAAAA,KAAK,EAAC;AAAP,KALH;AAMLK,IAAAA,GAAG,EAAC;AAACL,MAAAA,KAAK,EAAC;AAAP,KANC;AAOLM,IAAAA,SAAS,EAAC;AAACN,MAAAA,KAAK,EAAC;AAAP,KAPL;AAQLO,IAAAA,iBAAiB,EAAE;AARd,GAHM;AAcbC,EAAAA,aAAa,EAAE;AACbC,IAAAA,KAAK,OAAwB;AAAA,UAAvB;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAuB;AAC5B;;AAFY,GAdF;AAmBbC,EAAAA,OAAO,EAAE;AAEP,KAACC,WAAD,eAAyC;AAAA,UAA5B;AAAEC,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AACvC,YAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACvB,gBAAD,EAAmBsB,OAAnB,CAA3B;;AACA,UAAG,CAACG,QAAQ,CAACC,MAAb,EAAqB;AAACtB,QAAAA,OAAO,CAACuB,KAAR,CAAcF,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzB,IAAoCqB,QAAQ,CAACI,GAA3D,EAAgE,CAAhE;AAAoE;;AAC1F,UAAGJ,QAAQ,CAACC,MAAZ,EAAoB;AAClB,YAAGJ,OAAO,CAACQ,mBAAX,EAA+B;AAC3B1B,UAAAA,OAAO,CAAC2B,OAAR,CAAgB,iCAAhB,EAAmD,CAAnD;AACH,SAFD,MAEK;AACD3B,UAAAA,OAAO,CAAC2B,OAAR,CAAgB,iCAAhB,EAAmD,CAAnD;AACH;AACF;;AACD,YAAMP,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE,SAAR;AAAmB,WAAGP;AAAtB,OAAD,CAAT;AACD,KAbM;;AAcP,KAACQ,cAAD,eAA4C;AAAA,UAA5B;AAAEX,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AAC1C,UAAIU,IAAI,GAAIC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAZ;AACA,YAAMC,KAAK,GAAGL,IAAI,CAACM,QAAnB;AACA,UAAIC,GAAG,GAAG;AAAED,QAAAA,QAAQ,EAAED,KAAZ;AAAmBG,QAAAA,QAAQ,EAAEpB,OAAO,CAACoB,QAArC;AAA+CC,QAAAA,YAAY,EAAErB,OAAO,CAACsB,WAArE;AAAkFC,QAAAA,MAAM,EAAE;AAA1F,OAAV;AACA,YAAMpB,QAAQ,GAAG,MAAMF,IAAI,CAACtB,aAAD,EAAgBwC,GAAhB,CAA3B;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYzB,OAAZ;;AACA,UAAG,CAACG,QAAQ,CAACC,MAAb,EAAqB;AAACtB,QAAAA,OAAO,CAACuB,KAAR,CAAcF,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzB,IAAoCqB,QAAQ,CAACI,GAA3D,EAAgE,CAAhE;AAAoE;;AAC1F,UAAGJ,QAAQ,CAACC,MAAZ,EAAoB;AAACtB,QAAAA,OAAO,CAAC2B,OAAR,CAAgBN,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzC,EAAkD,CAAlD;AACpB;;AACD,YAAMoB,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE,QAAR;AAAkB,WAAGP;AAArB,OAAD,CAAT;AACD,KAxBM;;AAyBP,KAACvB,eAAD,eAA6C;AAAA,UAA5B;AAAEoB,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AAC3C,YAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACrB,eAAD,EAAkBoB,OAAlB,CAA3B;;AACA,UAAG,CAACG,QAAQ,CAACC,MAAb,EAAqB;AAACtB,QAAAA,OAAO,CAACuB,KAAR,CAAcF,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzB,IAAoCqB,QAAQ,CAACI,GAA3D,EAAgE,CAAhE;AAAoE,OAF/C,CAG3C;;;AACA,YAAML,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE,KAAR;AAAe,WAAGP;AAAlB,OAAD,CAAT;AACD,KA9BM;;AA+BP,KAACtB,UAAD,eAAwC;AAAA,UAA5B;AAAEmB,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AACtC,YAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACpB,UAAD,EAAamB,OAAb,CAA3B;;AACA,UAAG,CAACG,QAAQ,CAACC,MAAb,EAAqB;AAACtB,QAAAA,OAAO,CAACuB,KAAR,CAAcF,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzB,IAAoCqB,QAAQ,CAACI,GAA3D,EAAgE,CAAhE;AAAoE;;AAC1F,UAAGJ,QAAQ,CAACC,MAAZ,EAAoB;AAACtB,QAAAA,OAAO,CAAC2B,OAAR,CAAgBN,QAAQ,CAACG,GAAT,IAAgBH,QAAQ,CAACrB,OAAzC,EAAkD,CAAlD;AAAsD;;AAC3E,YAAMoB,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE,WAAR;AAAqB,WAAGP;AAAxB,OAAD,CAAT;AACD,KApCM;;AAqCP,KAACuB,cAAD,iBAA4C;AAAA,UAA5B;AAAE1B,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AAC1C,YAAMA,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAT;AACD,KAvCM;;AAwCV,KAACiB,WAAD,iBAAyC;AAAA,UAA5B;AAAE3B,QAAAA;AAAF,OAA4B;AAAA,UAAf;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAe;AACpC,YAAMA,GAAG,CAAC;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAT;AACD;;AA1CM,GAnBI;AAgEbkB,EAAAA,QAAQ,EAAE;AACR3C,IAAAA,OAAO,CAACD,KAAD,EAAQ6C,MAAR,EAAgB;AACrB,aAAO,EAAE,GAAG7C,KAAL;AAAYC,QAAAA,OAAO,EAAC4C;AAApB,OAAP;AACD,KAHO;;AAIRC,IAAAA,iBAAiB,CAAC9C,KAAD,EAAQ6C,MAAR,EAAgB;AAC/B,aAAO,EAAE,GAAG7C,KAAL;AAAYC,QAAAA,OAAO,EAAC4C;AAApB,OAAP;AACD,KANO;;AAORpC,IAAAA,iBAAiB,CAACT,KAAD,EAAQ6C,MAAR,EAAgB;AAC/B,aAAO,EAAE,GAAG7C,KAAL;AAAYS,QAAAA,iBAAiB,EAACoC;AAA9B,OAAP;AACD,KATO;;AAURE,IAAAA,QAAQ,CAAC/C,KAAD,EAAQ6C,MAAR,EAAgB;AACtB,aAAO,EAAE,GAAG7C,KAAL;AAAY+C,QAAAA,QAAQ,EAACF;AAArB,OAAP;AACD,KAZO;;AAaRG,IAAAA,cAAc,CAAChD,KAAD,EAAQ6C,MAAR,EAAgB;AAC5B,aAAO,EAAE,GAAG7C,KAAL;AAAYgD,QAAAA,cAAc,EAACH;AAA3B,OAAP;AACD,KAfO;;AAgBRzC,IAAAA,MAAM,CAACJ,KAAD,EAAQ6C,MAAR,EAAgB;AACxBA,MAAAA,MAAM,CAAC3C,KAAP,GAAeF,KAAK,CAACI,MAAN,CAAaF,KAAb,GAAmB,CAAlC;AACA,aAAO,EAAE,GAAGF,KAAL;AAAYI,QAAAA,MAAM,EAACyC;AAAnB,OAAP;AACG,KAnBO;;AAoBR1C,IAAAA,MAAM,CAACH,KAAD,EAAQ6C,MAAR,EAAgB;AACpBA,MAAAA,MAAM,CAAC3C,KAAP,GAAeF,KAAK,CAACG,MAAN,CAAaD,KAAb,GAAmB,CAAlC;AACA,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,MAAM,EAAC0C;AAAnB,OAAP;AACD,KAvBO;;AAwBRvC,IAAAA,OAAO,CAACN,KAAD,EAAQ6C,MAAR,EAAgB;AACrBA,MAAAA,MAAM,CAAC3C,KAAP,GAAeF,KAAK,CAACM,OAAN,CAAcJ,KAAd,GAAoB,CAAnC;AACA,aAAO,EAAE,GAAGF,KAAL;AAAYM,QAAAA,OAAO,EAACuC;AAApB,OAAP;AACD,KA3BO;;AA4BRI,IAAAA,YAAY,CAACjD,KAAD,EAAQ6C,MAAR,EAAgB;AAC1B,aAAO,EAAE,GAAG7C,KAAL;AAAYM,QAAAA,OAAO,EAAC;AAACJ,UAAAA,KAAK,EAAC;AAAP;AAApB,OAAP;AACD,KA9BO;;AA+BRG,IAAAA,MAAM,CAACL,KAAD,EAAQ6C,MAAR,EAAgB;AACpBA,MAAAA,MAAM,CAAC3C,KAAP,GAAeF,KAAK,CAACK,MAAN,CAAaH,KAAb,GAAmB,CAAlC;AACA,aAAO,EAAE,GAAGF,KAAL;AAAYK,QAAAA,MAAM,EAACwC;AAAnB,OAAP;AACD,KAlCO;;AAmCRtC,IAAAA,GAAG,CAACP,KAAD,EAAQ6C,MAAR,EAAgB;AACjB,aAAO,EAAE,GAAG7C,KAAL;AAAYO,QAAAA,GAAG,EAACsC;AAAhB,OAAP;AACD,KArCO;;AAsCRrC,IAAAA,SAAS,CAACR,KAAD,EAAQ6C,MAAR,EAAgB;AACvB,aAAO,EAAE,GAAG7C,KAAL;AAAYQ,QAAAA,SAAS,EAACqC;AAAtB,OAAP;AACD,KAxCO;;AAyCRH,IAAAA,cAAc,CAAC1C,KAAD,EAAQ6C,MAAR,EAAgB;AAC9B,aAAO,EAAE,GAAG7C,KAAL;AAAYQ,QAAAA,SAAS,EAAC;AAACN,UAAAA,KAAK,EAAC;AAAP;AAAtB,OAAP;AACC,KA3CO;;AA4CRgD,IAAAA,KAAK,CAAClD,KAAD,EAAQ6C,MAAR,EAAgB;AACrB,aAAO,EAAE,GAAG7C,KAAL;AAAYI,QAAAA,MAAM,EAAC;AAACF,UAAAA,KAAK,EAAC;AAAP,SAAnB;AAA8BI,QAAAA,OAAO,EAAC;AAACJ,UAAAA,KAAK,EAAC;AAAP,SAAtC;AAAiDC,QAAAA,MAAM,EAAC;AAACD,UAAAA,KAAK,EAAC;AAAP,SAAxD;AAAmEG,QAAAA,MAAM,EAAC;AAACH,UAAAA,KAAK,EAAC;AAAP,SAA1E;AAAqFK,QAAAA,GAAG,EAAC;AAACL,UAAAA,KAAK,EAAC;AAAP,SAAzF;AAAoGM,QAAAA,SAAS,EAAC;AAACN,UAAAA,KAAK,EAAC;AAAP;AAA9G,OAAP;AACC;;AA9CO;AAhEG,CAAf","sourcesContent":["import {approvebussiness , resetpassword, resendOTPTOUser, varifyUser, \r\n    } from '../services/api'\r\nimport {message} from 'antd'; \r\n\r\n\r\n\r\nexport default {\r\n  namespace: 'setting',\r\n\r\n  state: {\r\n    getBuss:{count:0},\r\n    update:{count:0}, \r\n    create:{count:0},\r\n    resetp:{count:0},\r\n    approve:{count:0},\r\n    otp:{count:0},\r\n    verifyotp:{count:0},\r\n    getSingleBussines: {}\r\n\t},\r\n\r\n  subscriptions: {\r\n    setup({ dispatch, history }) { \r\n    },\r\n  },\r\n\r\n  effects: {\r\n\r\n    *approveBuss({ payload }, { call, put }) {\r\n      const response = yield call(approvebussiness, payload); \r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n      if(response.status) {\r\n        if(payload.isBussinessVerified){\r\n            message.success('Business successfully approved!', 5);\r\n        }else{\r\n            message.success('Business successfully rejected!', 5);\r\n        }\r\n      } \r\n      yield put({ type: 'approve', ...response});\r\n    },\r\n    *changePassword({ payload }, { call, put }) {\r\n      let user =  JSON.parse(localStorage.getItem('user'));\r\n      const email = user.username;\r\n      let val = { username: email, password: payload.password, old_password: payload.oldPassword, otpchk: true };\r\n      const response = yield call(resetpassword, val);\r\n      console.log(payload)\r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n      if(response.status) {message.success(response.msg || response.message, 5);\r\n      } \r\n      yield put({ type: 'resetp', ...response});\r\n    },\r\n    *resendOTPTOUser({ payload }, { call, put }) {\r\n      const response = yield call(resendOTPTOUser, payload); \r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n      // if(response.status) {message.success(response.msg || response.message, 5);} \r\n      yield put({ type: 'otp', ...response});\r\n    },\r\n    *varifyUser({ payload }, { call, put }) {\r\n      const response = yield call(varifyUser, payload); \r\n      if(!response.status) {message.error(response.msg || response.message || response.err, 5);}\r\n      if(response.status) {message.success(response.msg || response.message, 5);} \r\n      yield put({ type: 'verifyotp', ...response});\r\n    },\r\n    *clearVerifyOTP({ payload }, { call, put }) {\r\n      yield put({ type: 'clearVerifyOTP'});\r\n    },\r\n\t*clearAction({ payload }, { call, put }) {\r\n      yield put({ type: 'clear'});\r\n    },\r\n  },\r\n\r\n  reducers: {\r\n    getBuss(state, action) {\r\n      return { ...state, getBuss:action };\r\n    },\r\n    getSellerBussines(state, action) {\r\n      return { ...state, getBuss:action };\r\n    },\r\n    getSingleBussines(state, action) {\r\n      return { ...state, getSingleBussines:action };\r\n    },\r\n    busslist(state, action) {\r\n      return { ...state, busslist:action };\r\n    },\r\n    busssellerlist(state, action) {\r\n      return { ...state, busssellerlist:action };\r\n    },\r\n    create(state, action) {\r\n\t\taction.count = state.create.count+1;\r\n\t\treturn { ...state, create:action };\r\n    },\r\n    update(state, action) {\r\n      action.count = state.update.count+1;\r\n      return { ...state, update:action };\r\n    },\r\n    approve(state, action) {\r\n      action.count = state.approve.count+1;\r\n      return { ...state, approve:action };\r\n    },\r\n    approveReset(state, action) {\r\n      return { ...state, approve:{count:0} };\r\n    },\r\n    resetp(state, action) {\r\n      action.count = state.resetp.count+1;\r\n      return { ...state, resetp:action };\r\n    },\r\n    otp(state, action) {\r\n      return { ...state, otp:action };\r\n    },\r\n    verifyotp(state, action) {\r\n      return { ...state, verifyotp:action };\r\n    },\r\n    clearVerifyOTP(state, action) {\r\n\t\t  return { ...state, verifyotp:{count:0}};\r\n    },\r\n    clear(state, action) {\r\n\t\t  return { ...state, create:{count:0}, approve:{count:0}, update:{count:0}, resetp:{count:0}, otp:{count:0}, verifyotp:{count:0}};\r\n    },\r\n  },\r\n};"]},"metadata":{},"sourceType":"module"}