{"ast":null,"code":"var _jsxFileName = \"/var/www/html/project/vivaquad/admin-vivaquad/src/components/sharing/crop-image/index.jsx\";\nimport React, { useState, useCallback, Fragment, useEffect, useRef } from 'react';\nimport { Button, Row, Col, Upload, Modal } from 'antd';\nimport ImgCrop from 'antd-img-crop';\nimport { connect } from 'dva';\nimport styles from './index.less';\n\nconst CropImage = props => {\n  const [disableBtn, setDisableBtn] = useState(false);\n  const [count, setCount] = useState(0);\n  const [fileList, setFileList] = useState([]);\n  const inputRef = useRef();\n  const {\n    dispatch\n  } = props;\n  useEffect(() => {\n    let unmounted = false;\n    return () => {\n      unmounted = true;\n    };\n  }, [props]);\n\n  const onChange = _ref => {\n    let {\n      fileList: newFileList\n    } = _ref;\n    setFileList(newFileList);\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  const onFinish = () => {\n    setDisableBtn(true);\n    let list = [];\n    fileList.map(item => list.push({\n      image: item.originFileObj,\n      view: item.thumbUrl\n    }));\n    dispatch({\n      type: 'global/uploadFileSingle',\n      payload: list\n    });\n  };\n\n  const cancelFun = () => {\n    setDisableBtn(false);\n    props.closeFun();\n  };\n\n  const dummyUploadRequest = _ref2 => {\n    let {\n      file,\n      onSuccess\n    } = _ref2;\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  };\n\n  useEffect(() => {\n    let unmounted = false;\n\n    if (props.resetVal && props.resetVal.length === 0) {\n      setFileList([]);\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [props.resetVal]);\n  useEffect(() => {\n    let unmounted = false;\n    let upload = props.global.uploadsingle;\n\n    if (!unmounted && 0 > count && (upload.files.length > 0 || upload.status === \"done\")) {\n      setCount(0);\n      setDisableBtn(false);\n      setFileList([]);\n      props.returnImg({\n        urls: upload.files,\n        file: upload.file\n      });\n    } else if (!unmounted && 0 > count && upload.status !== \"done\") {\n      setDisableBtn(false);\n      setCount(0);\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [props.global.uploadsingle]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    visible: props.visible,\n    title: \"Upload Image's\",\n    okText: \"Upload\",\n    onCancel: cancelFun,\n    onOk: onFinish,\n    okButtonProps: {\n      disabled: disableBtn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Upload, {\n    customRequest: dummyUploadRequest,\n    listType: \"picture-card\",\n    fileList: fileList,\n    onChange: onChange,\n    onPreview: onPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, fileList.length < (props.limit || 1) && '+ Upload'));\n}; //export default CropImage;\n\n\nexport default connect(_ref3 => {\n  let {\n    global\n  } = _ref3;\n  return {\n    global: global\n  };\n})(CropImage);","map":{"version":3,"sources":["/var/www/html/project/vivaquad/admin-vivaquad/src/components/sharing/crop-image/index.jsx"],"names":["React","useState","useCallback","Fragment","useEffect","useRef","Button","Row","Col","Upload","Modal","ImgCrop","connect","styles","CropImage","props","disableBtn","setDisableBtn","count","setCount","fileList","setFileList","inputRef","dispatch","unmounted","onChange","newFileList","onPreview","file","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","onFinish","list","map","item","push","view","thumbUrl","type","payload","cancelFun","closeFun","dummyUploadRequest","onSuccess","setTimeout","resetVal","length","upload","global","uploadsingle","files","status","returnImg","urls","visible","disabled","limit"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, Fragment, useEffect, useRef } from 'react';\r\nimport { Button, Row, Col, Upload, Modal } from 'antd';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { connect } from 'dva';\r\n\r\nimport styles from './index.less';\r\n\r\nconst CropImage = props =>{\r\n\tconst [disableBtn, setDisableBtn] = useState(false);\r\n\tconst [count, setCount] = useState(0)\r\n\tconst [fileList, setFileList] = useState([])\r\n\tconst inputRef = useRef();\r\n\tconst {dispatch} = props;\r\n\t\r\n\tuseEffect(() => {\r\n\t\tlet unmounted = false;\r\n\t\treturn () => {unmounted = true; }\r\n    },[props])\r\n\t\r\n\tconst onChange = ({ fileList: newFileList }) => {\r\n\t\tsetFileList(newFileList);\r\n\t  };\r\n\r\n\tconst onPreview = async file => {\r\n\t\tlet src = file.url;\r\n\t\tif (!src) {\r\n\t\t  src = await new Promise(resolve => {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.readAsDataURL(file.originFileObj);\r\n\t\t\treader.onload = () => resolve(reader.result);\r\n\t\t  });\r\n\t\t}\r\n\t\tconst image = new Image();\r\n\t\timage.src = src;\r\n\t\tconst imgWindow = window.open(src);\r\n\t\timgWindow.document.write(image.outerHTML);\r\n\t};\r\n\t\r\n\tconst onFinish=()=>{\r\n\t\tsetDisableBtn(true)\t\r\n\t\tlet list = [];\r\n\t\tfileList.map(item=> list.push({image:item.originFileObj, view:item.thumbUrl}))\r\n\t\tdispatch({type: 'global/uploadFileSingle',  payload: list});\r\n\t}\r\n\t\r\n\tconst cancelFun=()=>{\r\n\t\tsetDisableBtn(false);\r\n\t\tprops.closeFun();\r\n\t}\r\n\t\r\n\tconst dummyUploadRequest = ({ file, onSuccess }) => {\r\n\t\tsetTimeout(() => {\r\n\t\t  onSuccess(\"ok\");\r\n\t\t}, 0);\r\n\t  };\r\n\r\n\tuseEffect(() => {\r\n\t\tlet unmounted = false;\r\n\t\tif(props.resetVal && props.resetVal.length===0){\r\n\t\t\tsetFileList([])\r\n\t\t}\r\n\t\treturn () => {\r\n  \t  unmounted = true;\r\n      }\r\n\t}, [props.resetVal]); \r\n\t\r\n\tuseEffect(() => {\r\n\t\tlet unmounted = false;\r\n\t\tlet upload = props.global.uploadsingle;\r\n\t\tif(!unmounted && 0 > count && (upload.files.length >0 || upload.status === \"done\")){\r\n\t\t  setCount(0);\r\n\t\t  setDisableBtn(false)\r\n\t\t  setFileList([])\r\n\t\t  props.returnImg({urls:upload.files, file: upload.file});\r\n\t\t}else if(!unmounted && 0 > count && upload.status !== \"done\"){\r\n\t\t  setDisableBtn(false)\r\n\t\t  setCount(0);\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tunmounted = true;\r\n\t\t}\r\n    },[props.global.uploadsingle])\r\n\t\r\n\t\r\n\treturn <Modal visible={props.visible} title=\"Upload Image's\" okText=\"Upload\" onCancel={cancelFun} onOk={onFinish} okButtonProps={{ disabled: disableBtn }}>\r\n      \r\n\t\t  <Upload\r\n\t\t\tcustomRequest={dummyUploadRequest}\r\n\t\t\tlistType=\"picture-card\"\r\n\t\t\tfileList={fileList}\r\n\t\t\tonChange={onChange}\r\n\t\t\tonPreview={onPreview}\r\n\t\t  >\r\n\t\t\t{fileList.length < (props.limit || 1) && '+ Upload'}\r\n\t\t  </Upload>\r\n\t\r\n        </Modal>\r\n\t\t\r\n}\r\n\r\n//export default CropImage;\r\nexport default connect(({global }) => ({\r\n  global: global,\r\n}))(CropImage);"]},"metadata":{},"sourceType":"module"}