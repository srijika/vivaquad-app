{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.runSaga = runSaga;\n\nvar _utils = /*#__PURE__*/require('./utils');\n\nvar _proc = /*#__PURE__*/require('./proc');\n\nvar _proc2 = /*#__PURE__*/_interopRequireDefault(_proc);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar RUN_SAGA_SIGNATURE = 'runSaga(storeInterface, saga, ...args)';\nvar NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ': saga argument must be a Generator function!';\n\nfunction runSaga(storeInterface, saga) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var iterator = void 0;\n\n  if (_utils.is.iterator(storeInterface)) {\n    if (process.env.NODE_ENV === 'development') {\n      (0, _utils.log)('warn', 'runSaga(iterator, storeInterface) has been deprecated in favor of ' + RUN_SAGA_SIGNATURE);\n    }\n\n    iterator = storeInterface;\n    storeInterface = saga;\n  } else {\n    (0, _utils.check)(saga, _utils.is.func, NON_GENERATOR_ERR);\n    iterator = saga.apply(undefined, args);\n    (0, _utils.check)(iterator, _utils.is.iterator, NON_GENERATOR_ERR);\n  }\n\n  var _storeInterface = storeInterface,\n      subscribe = _storeInterface.subscribe,\n      dispatch = _storeInterface.dispatch,\n      getState = _storeInterface.getState,\n      context = _storeInterface.context,\n      sagaMonitor = _storeInterface.sagaMonitor,\n      logger = _storeInterface.logger,\n      onError = _storeInterface.onError;\n  var effectId = (0, _utils.uid)();\n\n  if (sagaMonitor) {\n    // monitors are expected to have a certain interface, let's fill-in any missing ones\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || _utils.noop;\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || _utils.noop;\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || _utils.noop;\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || _utils.noop;\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || _utils.noop;\n    sagaMonitor.effectTriggered({\n      effectId: effectId,\n      root: true,\n      parentEffectId: 0,\n      effect: {\n        root: true,\n        saga: saga,\n        args: args\n      }\n    });\n  }\n\n  var task = (0, _proc2.default)(iterator, subscribe, (0, _utils.wrapSagaDispatch)(dispatch), getState, context, {\n    sagaMonitor: sagaMonitor,\n    logger: logger,\n    onError: onError\n  }, effectId, saga.name);\n\n  if (sagaMonitor) {\n    sagaMonitor.effectResolved(effectId, task);\n  }\n\n  return task;\n}","map":{"version":3,"sources":["/var/www/html/project/vivaquad/admin-vivaquad/node_modules/redux-saga/lib/internal/runSaga.js"],"names":["exports","__esModule","runSaga","_utils","require","_proc","_proc2","_interopRequireDefault","obj","default","RUN_SAGA_SIGNATURE","NON_GENERATOR_ERR","storeInterface","saga","_len","arguments","length","args","Array","_key","iterator","is","process","env","NODE_ENV","log","check","func","apply","undefined","_storeInterface","subscribe","dispatch","getState","context","sagaMonitor","logger","onError","effectId","uid","effectTriggered","noop","effectResolved","effectRejected","effectCancelled","actionDispatched","root","parentEffectId","effect","task","wrapSagaDispatch","name"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.runSaga = runSaga;\n\nvar _utils = /*#__PURE__*/require('./utils');\n\nvar _proc = /*#__PURE__*/require('./proc');\n\nvar _proc2 = /*#__PURE__*/_interopRequireDefault(_proc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RUN_SAGA_SIGNATURE = 'runSaga(storeInterface, saga, ...args)';\nvar NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ': saga argument must be a Generator function!';\n\nfunction runSaga(storeInterface, saga) {\n  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var iterator = void 0;\n\n  if (_utils.is.iterator(storeInterface)) {\n    if (process.env.NODE_ENV === 'development') {\n      (0, _utils.log)('warn', 'runSaga(iterator, storeInterface) has been deprecated in favor of ' + RUN_SAGA_SIGNATURE);\n    }\n    iterator = storeInterface;\n    storeInterface = saga;\n  } else {\n    (0, _utils.check)(saga, _utils.is.func, NON_GENERATOR_ERR);\n    iterator = saga.apply(undefined, args);\n    (0, _utils.check)(iterator, _utils.is.iterator, NON_GENERATOR_ERR);\n  }\n\n  var _storeInterface = storeInterface,\n      subscribe = _storeInterface.subscribe,\n      dispatch = _storeInterface.dispatch,\n      getState = _storeInterface.getState,\n      context = _storeInterface.context,\n      sagaMonitor = _storeInterface.sagaMonitor,\n      logger = _storeInterface.logger,\n      onError = _storeInterface.onError;\n\n\n  var effectId = (0, _utils.uid)();\n\n  if (sagaMonitor) {\n    // monitors are expected to have a certain interface, let's fill-in any missing ones\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || _utils.noop;\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || _utils.noop;\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || _utils.noop;\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || _utils.noop;\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || _utils.noop;\n\n    sagaMonitor.effectTriggered({ effectId: effectId, root: true, parentEffectId: 0, effect: { root: true, saga: saga, args: args } });\n  }\n\n  var task = (0, _proc2.default)(iterator, subscribe, (0, _utils.wrapSagaDispatch)(dispatch), getState, context, { sagaMonitor: sagaMonitor, logger: logger, onError: onError }, effectId, saga.name);\n\n  if (sagaMonitor) {\n    sagaMonitor.effectResolved(effectId, task);\n  }\n\n  return task;\n}"]},"metadata":{},"sourceType":"script"}