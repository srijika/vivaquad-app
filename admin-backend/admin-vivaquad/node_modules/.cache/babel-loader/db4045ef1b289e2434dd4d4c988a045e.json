{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.asap = asap;\nexports.suspend = suspend;\nexports.flush = flush;\nvar queue = [];\n/**\n  Variable to hold a counting semaphore\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\n    already suspended)\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\n    triggers flushing the queued tasks.\n**/\n\nvar semaphore = 0;\n/**\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\n  and flushed after this task has finished (assuming the scheduler endup in a released\n  state).\n**/\n\nfunction exec(task) {\n  try {\n    suspend();\n    task();\n  } finally {\n    release();\n  }\n}\n/**\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\n**/\n\n\nfunction asap(task) {\n  queue.push(task);\n\n  if (!semaphore) {\n    suspend();\n    flush();\n  }\n}\n/**\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\n  scheduler is released.\n**/\n\n\nfunction suspend() {\n  semaphore++;\n}\n/**\n  Puts the scheduler in a `released` state.\n**/\n\n\nfunction release() {\n  semaphore--;\n}\n/**\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\n**/\n\n\nfunction flush() {\n  release();\n  var task = void 0;\n\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task);\n  }\n}","map":{"version":3,"sources":["/var/www/html/project/vivaquad/admin-vivaquad/node_modules/redux-saga/lib/internal/scheduler.js"],"names":["exports","__esModule","asap","suspend","flush","queue","semaphore","exec","task","release","push","shift","undefined"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,IAAR,GAAeA,IAAf;AACAF,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACAH,OAAO,CAACI,KAAR,GAAgBA,KAAhB;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAI;AACFL,IAAAA,OAAO;AACPK,IAAAA,IAAI;AACL,GAHD,SAGU;AACRC,IAAAA,OAAO;AACR;AACF;AAED;AACA;AACA;;;AACA,SAASP,IAAT,CAAcM,IAAd,EAAoB;AAClBH,EAAAA,KAAK,CAACK,IAAN,CAAWF,IAAX;;AAEA,MAAI,CAACF,SAAL,EAAgB;AACdH,IAAAA,OAAO;AACPC,IAAAA,KAAK;AACN;AACF;AAED;AACA;AACA;AACA;;;AACA,SAASD,OAAT,GAAmB;AACjBG,EAAAA,SAAS;AACV;AAED;AACA;AACA;;;AACA,SAASG,OAAT,GAAmB;AACjBH,EAAAA,SAAS;AACV;AAED;AACA;AACA;;;AACA,SAASF,KAAT,GAAiB;AACfK,EAAAA,OAAO;AAEP,MAAID,IAAI,GAAG,KAAK,CAAhB;;AACA,SAAO,CAACF,SAAD,IAAc,CAACE,IAAI,GAAGH,KAAK,CAACM,KAAN,EAAR,MAA2BC,SAAhD,EAA2D;AACzDL,IAAAA,IAAI,CAACC,IAAD,CAAJ;AACD;AACF","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.asap = asap;\nexports.suspend = suspend;\nexports.flush = flush;\nvar queue = [];\n/**\n  Variable to hold a counting semaphore\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\n    already suspended)\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\n    triggers flushing the queued tasks.\n**/\nvar semaphore = 0;\n\n/**\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\n  and flushed after this task has finished (assuming the scheduler endup in a released\n  state).\n**/\nfunction exec(task) {\n  try {\n    suspend();\n    task();\n  } finally {\n    release();\n  }\n}\n\n/**\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\n**/\nfunction asap(task) {\n  queue.push(task);\n\n  if (!semaphore) {\n    suspend();\n    flush();\n  }\n}\n\n/**\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\n  scheduler is released.\n**/\nfunction suspend() {\n  semaphore++;\n}\n\n/**\n  Puts the scheduler in a `released` state.\n**/\nfunction release() {\n  semaphore--;\n}\n\n/**\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\n**/\nfunction flush() {\n  release();\n\n  var task = void 0;\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task);\n  }\n}"]},"metadata":{},"sourceType":"script"}